name: S1000D Validation

on:
  push:
    branches: [main, 'copilot/**']
    paths:
      - '**/ata/ATA-**/*.xml'
      - '**/ata/ATA-**/BREX.xml'
      - '**/ata/ATA-**/DMRL.xml'
      - '.github/workflows/s1000d-checks.yml'
  pull_request:
    paths:
      - '**/ata/ATA-**/*.xml'
      - '**/ata/ATA-**/BREX.xml'
      - '**/ata/ATA-**/DMRL.xml'

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install lxml defusedxml

          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Find S1000D data modules
        id: find-dms
        run: |
          echo "üîç Finding S1000D data modules..."

          find . -path "*/ata/ATA-*/*.xml" -type f > s1000d-files.txt

          grep -v "BREX" s1000d-files.txt | \
            grep -v "brex" | \
            grep -v "DMRL" | \
            grep -v "dmrl" | \
            grep -v "test_case" | \
            grep -v "tc_" | \
            grep -v "schedule.xml" | \
            grep -v "partition.xml" | \
            grep -v "catalog.xml" > data-modules.txt || true

          if [ -s data-modules.txt ]; then
              echo "Found $(wc -l < data-modules.txt) data modules"
              cat data-modules.txt
              echo "count=$(wc -l < data-modules.txt)" >> $GITHUB_OUTPUT
          else
              echo "No data modules found"
              echo "count=0" >> $GITHUB_OUTPUT
          fi

      - name: Validate XML well-formedness
        if: steps.find-dms.outputs.count > 0
        run: |
          echo "‚úÖ Validating XML well-formedness..."

          errors=0
          while IFS= read -r dm; do
              echo "Checking: $dm"
              if ! xmllint --noout "$dm" 2>&1; then
                  echo "  ‚ùå FAILED: Not well-formed XML"
                  errors=$((errors + 1))
              else
                  echo "  ‚úÖ PASSED"
              fi
          done < data-modules.txt

          if [ $errors -gt 0 ]; then
              echo "‚ùå $errors data module(s) failed well-formedness check"
              exit 1
          else
              echo "‚úÖ All data modules are well-formed"
          fi

      - name: Check S1000D structure (basic)
        if: steps.find-dms.outputs.count > 0
        run: |
          python - <<'EOF'
          import sys
          from defusedxml import ElementTree as ET

          def find_with_or_without_ns(root, tag):
              # Try no namespace
              result = root.find(f'.//{tag}')
              if result is not None:
                  return result
              # Try any namespace
              for elem in root.iter():
                  if elem.tag.endswith(tag):
                      return elem
              return None

          with open("data-modules.txt") as f:
              data_modules = [line.strip() for line in f if line.strip()]

          errors = []
          warnings = []

          for dm_path in data_modules:
              print(f"\nüîç Checking: {dm_path}")

              try:
                  tree = ET.parse(dm_path)
                  root = tree.getroot()

                  # identAndStatusSection
                  if not find_with_or_without_ns(root, "identAndStatusSection"):
                      warnings.append(f"{dm_path}: Missing identAndStatusSection")

                  # dmIdent
                  if not find_with_or_without_ns(root, "dmIdent"):
                      errors.append(f"{dm_path}: Missing dmIdent (data module code)")

                  # security
                  if not find_with_or_without_ns(root, "security"):
                      warnings.append(f"{dm_path}: Missing security classification")

                  print(f"  ‚úÖ Basic structure OK")
              except Exception as e:
                  errors.append(f"{dm_path}: XML parsing error: {e}")
                  print(f"  ‚ùå ERROR: {e}")

          if warnings:
              print("\n‚ö†Ô∏è  WARNINGS:")
              for warning in warnings:
                  print(f"  ‚Ä¢ {warning}")

          if errors:
              print("\n‚ùå ERRORS:")
              for error in errors:
                  print(f"  ‚Ä¢ {error}")
              sys.exit(1)
          else:
              print("\n‚úÖ All data modules passed basic structure checks")
          EOF

      - name: Find BREX files
        id: find-brex
        run: |
          echo "üîç Finding BREX files..."
          find . -path "*/ata/ATA-*/BREX.xml" -type f > brex-files.txt || true

          if [ -s brex-files.txt ]; then
              echo "Found $(wc -l < brex-files.txt) BREX files"
              cat brex-files.txt
              echo "count=$(wc -l < brex-files.txt)" >> $GITHUB_OUTPUT
          else
              echo "No BREX files found"
              echo "count=0" >> $GITHUB_OUTPUT
          fi

      - name: Validate BREX files
        if: steps.find-brex.outputs.count > 0
        run: |
          echo "‚úÖ Validating BREX files..."

          errors=0
          while IFS= read -r brex; do
              echo "Checking: $brex"
              if ! xmllint --noout "$brex" 2>&1; then
                  echo "  ‚ùå FAILED"
                  errors=$((errors + 1))
              else
                  echo "  ‚úÖ PASSED"
              fi
          done < brex-files.txt

          if [ $errors -gt 0 ]; then
              echo "‚ùå $errors BREX file(s) failed validation"
              exit 1
          else
              echo "‚úÖ All BREX files are well-formed"
          fi

      - name: Check DMRL files
        run: |
          echo "üîç Checking for DMRL (Data Module Requirements List)..."
          find . -path "*/ata/ATA-*/DMRL.xml" -type f > dmrl-files.txt || true

          if [ -s dmrl-files.txt ]; then
              echo "Found $(wc -l < dmrl-files.txt) DMRL files"

              # Validate DMRL files
              while IFS= read -r dmrl; do
                  echo "Checking: $dmrl"
                  xmllint --noout "$dmrl" 2>&1 || true
              done < dmrl-files.txt
          else
              echo "‚ö†Ô∏è  No DMRL files found (recommended for S1000D projects)"
          fi

      - name: Generate report
        if: always()
        run: |
          echo "## S1000D Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f data-modules.txt ]; then
              dm_count=$(wc -l < data-modules.txt || echo 0)
              echo "- **Data Modules:** $dm_count" >> $GITHUB_STEP_SUMMARY
          else
              echo "- **Data Modules:** 0" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f brex-files.txt ]; then
              brex_count=$(wc -l < brex-files.txt || echo 0)
              echo "- **BREX Files:** $brex_count" >> $GITHUB_STEP_SUMMARY
          else
              echo "- **BREX Files:** 0" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f dmrl-files.txt ]; then
              dmrl_count=$(wc -l < dmrl-files.txt || echo 0)
              echo "- **DMRL Files:** $dmrl_count" >> $GITHUB_STEP_SUMMARY
          else
              echo "- **DMRL Files:** 0" >> $GITHUB_STEP_SUMMARY
          fi
